#include <WSWire.h> 
 #define BLYNK_PRINT Serial
 #include <ESP8266WiFi.h>
 #include <BlynkSimpleEsp8266.h>
/**
#define BLYNK_TEMPLATE_ID "TMPL6qTcTd9Lj"
#define BLYNK_TEMPLATE_NAME "Quickstart Template"
#define BLYNK_AUTH_TOKEN "qw9IPbsS6nqZ_ZXxl6xfCUCJjAeZ3fTh"
**/
#define BLYNK_TEMPLATE_ID "TMPL6VEW5ezz8"
#define BLYNK_TEMPLATE_NAME "Quickstart Template"
#define BLYNK_AUTH_TOKEN "ru3KnzH3wT37mTreC3jHiqYzpE5weyWp"
int buttonPin = 12;  // d6
int buzzerPin = 15;  // d8 
int lastButtonState = 1;    
int cheat_code = 0;  // just for testing
 const int MPU_addr = 0x68; // I2C address of the MPU-6050
 int16_t AcX, AcY, AcZ, Tmp, GyX, GyY, GyZ;
 float ax = 0, ay = 0, az = 0, gx = 0, gy = 0, gz = 0, gz_2 = 0;
 boolean fall = false; //stores if a fall has occurred
 boolean trigger1 = false; //stores if first trigger (lower threshold) has occurred
 boolean trigger2 = false; //stores if second trigger (upper threshold) has occurred
 boolean trigger3 = false; //stores if third trigger (orientation change) has occurred
 byte trigger1count = 0; //stores the counts past since trigger 1 was set true
 byte trigger2count = 0; //stores the counts past since trigger 2 was set true
 byte trigger3count = 0; //stores the counts past since trigger 3 was set true
 int angleChange = 0;
 int buttonState = 0;
 bool ison = true;
 // WiFi network info.
 char auth[] = "ru3KnzH3wT37mTreC3jHiqYzpE5weyWp"; //Auth code sent via Email
 const char *ssid = "陳彥廷的iPhone"; // Enter your Wi-Fi Name
 const char *pass = "11087tim"; // Enter your Wi-Fi Password
 void setup() {
   pinMode(buzzerPin, OUTPUT);  // output tune     
   pinMode(buttonPin, INPUT);  // input signal
   Serial.begin(115200);
   Blynk.begin(auth, ssid, pass);
   Wire.begin();
   Wire.beginTransmission(MPU_addr);
   Wire.write(0x6B);  // PWR_MGMT_1 register
   Wire.write(0);     // set to zero (wakes up the MPU-6050)
   Wire.endTransmission(true);
   Serial.println("Wrote to IMU");
   Serial.println("Connecting to ");
   Serial.println(ssid);
   WiFi.begin(ssid, pass);
   while (WiFi.status() != WL_CONNECTED)
   {
     delay(500);
     Serial.print(".");              // print … till not connected
   }
   Serial.println("");
   Serial.println("WiFi connected");
 }
 void loop() {
  
   Blynk.run();
   mpu_read();
   ax = (AcX - 2050) / 16384.00;
   ay = (AcY - 77) / 16384.00;
   az = (AcZ - 1947) / 16384.00;
   gx = (GyX + 270) / 131.07;
   gy = (GyY - 351) / 131.07;
   gz = (GyZ + 136) / 131.07;
   Serial.print("ax:");
   Serial.print(ax);   Serial.print(",");
  
   Serial.print("ay:");
   Serial.print(ay);   Serial.print(",");
   
   Serial.print("az:");
   Serial.print(az);   Serial.print(",");
   
   Serial.print("gx:");
   Serial.print(gx);   Serial.print(",");
   
   Serial.print("gy:");
   Serial.print(gy);   Serial.print(",");
   
   Serial.print("gz:");
   Serial.print(gz);   Serial.print(",");
   

   // calculating Amplitute vactor for 3 axis
   float Raw_Amp = pow(pow(ax, 2) + pow(ay, 2) + pow(az, 2), 0.5);
   int Amp = Raw_Amp * 10;  // Mulitiplied by 10 bcz values are between 0 to 1
   Serial.print("Amp:"); 
   Serial.print(Amp);Serial.print(",");

  angleChange = pow(pow(gx, 2) + pow(gy, 2) + pow(gz, 2), 0.5); 
   Serial.print("angleChange:");  
   Serial.println(angleChange);

///if (Amp <= 2 && trigger2 == false) { //if AM breaks lower threshold (0.4g)     
  ///trigger1 = true;     
  //Serial.println("TRIGGER 1 ACTIVATED");   
///}   
///if (trigger1 == true) {     
  
  if (Amp >= 14 ) { //AMP break 14
        trigger2 = true;
        //Serial.println("TRIGGER 2 ACTIVATED");
        trigger1 = false; 
        trigger1count = 0;
  }
///   }
  if (trigger2 == true) {
     trigger2count++;
     //angleChange = pow(pow(gx, 2) + pow(gy, 2) + pow(gz, 2), 0.5);
     if (angleChange >= 250 ) { //if orientation changes more than 300    
        trigger3 = true; 
        trigger2 = false; 
        trigger2count = 0;       
        //Serial.println(angleChange);       
        //Serial.println("TRIGGER 3 ACTIVATED");     
      }   
  }   
  if (trigger3 == true) {   
    trigger3count++;     
  }
  Serial.println(trigger3count);
if (trigger3 == true & trigger3count <= 3) { // not too frequent
    delay(500);
    mpu_read();
    ax = (AcX - 2050) / 16384.00;
    ay = (AcY - 77) / 16384.00;
    az = (AcZ - 1947) / 16384.00;
    gx = (GyX + 270) / 131.07;
    gy = (GyY - 351) / 131.07;
    gz_2 = (GyZ + 136) / 131.07;
    int angleChange2 = pow(pow(gx, 2) + pow(gy, 2) + pow(gz_2, 2), 0.5);
       //delay(10);
    Serial.print("angleChange2:");
    Serial.println(angleChange2);
    Serial.println(gz_2);  
    if ((angleChange2 >= 0) && (angleChange2 <= 100)) { //if orientation changes remains between 0-10 degrees  , change t0 0~100     
      if(abs(gz_2 - gz) < 200){
          fall = true; 
      trigger3 = false;
      trigger3count = 0;         
        //Serial.println(angleChange);   
      }
      else { //user regained normal orientation         
      trigger3 = false; 
      trigger3count = 0;         
    //Serial.println("TRIGGER 3 DEACTIVATED");       
    }  
      
    }       
    else { //user regained normal orientation         
      trigger3 = false; 
      trigger3count = 0;         
    //Serial.println("TRIGGER 3 DEACTIVATED");       
    }     
}   

if (fall == true) { //in event of a fall detection 
  tone(buzzerPin, 441);
  delay(10);

buttonState = digitalRead(buttonPin);
  if (buttonState != lastButtonState && buttonState == LOW) {
    ison = !ison; 
  }

  if (ison) { 
    
    noTone(buzzerPin);    // tone(buzzerPin, 1000);
    
  }
  else { 
    Serial.println("FALL DETECTED");

    Serial.print("ax:");
    Serial.print(ax);   Serial.print(",");
      
    Serial.print("ay:");
    Serial.print(ay);   Serial.print(",");
      
    Serial.print("az:");
    Serial.print(az);   Serial.print(",");
      
    Serial.print("gx:");
    Serial.print(gx);   Serial.print(",");
      
    Serial.print("gy:");
    Serial.print(gy);   Serial.print(",");
      
    Serial.print("gz:");
    Serial.print(gz);   Serial.print(","); 

    Serial.print("Amp:");
    Serial.print(Amp);  Serial.print(","); 

    Serial.print("angleChange:");
    Serial.println(angleChange); 
        
    Blynk.logEvent("falldetect","Alert : Fall Detected…! take action immediately.");     
  }
    
}   

  delay(100);
  lastButtonState = buttonState; // 記錄前一次按鈕狀態
  delay(50);

}
void mpu_read() {
   Wire.beginTransmission(MPU_addr);
   Wire.write(0x3B);  // starting with register 0x3B (ACCEL_XOUT_H)
   Wire.endTransmission(false);
   Wire.requestFrom(MPU_addr, 14, true); // request a total of 14 registers
   AcX = Wire.read() << 8 | Wire.read(); // 0x3B (ACCEL_XOUT_H) & 0x3C (ACCEL_XOUT_L)
 
   AcY = Wire.read() << 8 | Wire.read(); // 0x3D (ACCEL_YOUT_H) & 0x3E (ACCEL_YOUT_L)
   
   AcZ = Wire.read() << 8 | Wire.read(); // 0x3F (ACCEL_ZOUT_H) & 0x40 (ACCEL_ZOUT_L)
  
   Tmp = Wire.read() << 8 | Wire.read(); // 0x41 (TEMP_OUT_H) & 0x42 (TEMP_OUT_L)
   GyX = Wire.read() << 8 | Wire.read(); // 0x43 (GYRO_XOUT_H) & 0x44 (GYRO_XOUT_L)
  
   GyY = Wire.read() << 8 | Wire.read(); // 0x45 (GYRO_YOUT_H) & 0x46 (GYRO_YOUT_L)
  
   GyZ = Wire.read() << 8 | Wire.read(); // 0x47 (GYRO_ZOUT_H) & 0x48 (GYRO_ZOUT_L)
  
 }
